# Set seeds for reproducibility
import random
random.seed(0)

import numpy as np
np.random.seed(0)

import tensorflow as tf
tf.random.set_seed(0)

import os
import json
from zipfile import ZipFile
from PIL import Image

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import layers, models

!pip install kaggle

kaggle_credentails = json.load(open("kaggle.json"))

# setup Kaggle API key as environment variables
os.environ['KAGGLE_USERNAME'] = kaggle_credentails["username"]
os.environ['KAGGLE_KEY'] = kaggle_credentails["key"]

!kaggle datasets download -d abdallahalidev/plantvillage-dataset

!ls


# Unzip the downloaded dataset
with ZipFile("plantvillage-dataset.zip", 'r') as zip_ref:
    zip_ref.extractall()

print(os.listdir("plantvillage dataset"))


print(len(os.listdir("plantvillage dataset/segmented")))
print(os.listdir("plantvillage dataset/segmented")[:5])

print(len(os.listdir("plantvillage dataset/color")))
print(os.listdir("plantvillage dataset/color")[:5])

print(len(os.listdir("plantvillage dataset/grayscale")))
print(os.listdir("plantvillage dataset/grayscale")[:5])

print(len(os.listdir("plantvillage dataset/color/Grape___healthy")))
print(os.listdir("plantvillage dataset/color/Grape___healthy")[:5])

# Dataset Path
base_dir = 'plantvillage dataset/color'


image_path = '/content/plantvillage dataset/color/Apple__Cedar_apple_rust/025b2b9a-0ec4-4132-96ac-7f2832d0db4a__FREC_C.Rust 3655.JPG'

# Read the image
img = mpimg.imread(image_path)

print(img.shape)
# Display the image
plt.imshow(img)
plt.axis('off')  # Turn off axis numbers
plt.show()

image_path = '/content/plantvillage dataset/color/Apple__Cedar_apple_rust/025b2b9a-0ec4-4132-96ac-7f2832d0db4a__FREC_C.Rust 3655.JPG'

# Read the image
img = mpimg.imread(image_path)

print(img)

# Image Parameters
img_size = 224
batch_size = 32

# Image Data Generators
data_gen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2  # Use 20% of data for validation
)


# Train Generator
train_generator = data_gen.flow_from_directory(
    base_dir,
    target_size=(img_size, img_size),
    batch_size=batch_size,
    subset='training',
    class_mode='categorical'
)


# Validation Generator
validation_generator = data_gen.flow_from_directory(
    base_dir,
    target_size=(img_size, img_size),
    batch_size=batch_size,
    subset='validation',
    class_mode='categorical'
)

# Pesticide recommendations dictionary
pesticide_info = {
    "Apple___Apple_scab": ("Scab Control Pesticide", "https://example.com/apple-scab-pesticide"),
    "Apple___Cedar_apple_rust": ("Rust Control Pesticide", "https://example.com/apple-rust-pesticide"),
    "Grape___healthy": ("No treatment needed", "https://example.com/grape-care"),
    # Add more entries as needed
}

# Try to load pre-trained model
model_path = 'plant_disease_prediction_model.h5'
if os.path.exists(model_path):
    print("Loading pre-trained model...")
    model = models.load_model(model_path)
else:
    print("Training new model...")
    # Model Definition
    model = models.Sequential()
    model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(img_size, img_size, 3)))
    model.add(layers.MaxPooling2D(2, 2))
    model.add(layers.Conv2D(64, (3, 3), activation='relu'))
    model.add(layers.MaxPooling2D(2, 2))
    model.add(layers.Flatten())
    model.add(layers.Dense(256, activation='relu'))
    model.add(layers.Dense(train_generator.num_classes, activation='softmax'))

    # Model summary
    model.summary()

# model summary
model.summary()


# Compile the Model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Training the Model
history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // batch_size,
    epochs=5,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // batch_size
)



# Model Evaluation
print("Evaluating model...")
val_loss, val_accuracy = model.evaluate(validation_generator, steps=validation_generator.samples // batch_size)
print(f"Validation Accuracy: {val_accuracy * 100:.2f}%")


# Plot training & validation accuracy values
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Function to Load and Preprocess the Image using Pillow
def load_and_preprocess_image(image_path, target_size=(224, 224)):
 
    img = Image.open(image_path)
 
    img = img.resize(target_size)
 
    img_array = np.array(img)
 
    img_array = np.expand_dims(img_array, axis=0)
    # Scale the image values to [0, 1]
    img_array = img_array.astype('float32') / 255.
    return img_array

# Function to Predict the Class of an Image and provide pesticide info
def predict_image_class_and_pesticide(model, image_path, class_indices, pesticide_info):
    preprocessed_img = load_and_preprocess_image(image_path)
    predictions = model.predict(preprocessed_img)
    predicted_class_index = np.argmax(predictions, axis=1)[0]
    predicted_class_name = class_indices[predicted_class_index]
    
    # Retrieve pesticide info
    pesticide_name, buying_link = pesticide_info.get(predicted_class_name, ("No recommendation", "N/A"))
    
    return predicted_class_name, pesticide_name, buying_link

# Create a mapping from class indices to class names
class_indices = {v: k for k, v in train_generator.class_indices.items()}

# Save the class names as json file
json.dump(class_indices, open('class_indices.json', 'w'))

class_indices


# Example Usage
#image_path = '/content/plantvillage dataset/color/Apple__Apple_scab/01a66316-0e98-4d3b-a56f-d78752cd043f__FREC_Scab 3003.JPG'
#image_path = '/content/test_blueberry_healthy.jpg'
#image_path = '/content/test_potato_early_blight.jpg'
predicted_class_name = predict_image_class(model, image_path, class_indices)

# Output the result
print("Predicted Class Name:", predicted_class_name)

# Example Usage
image_path = '/content/plantvillage dataset/color/Apple__Apple_scab/01a66316-0e98-4d3b-a56f-d78752cd043f__FREC_Scab 3003.JPG'
predicted_class_name, pesticide_name, buying_link = predict_image_class_and_pesticide(model, image_path, class_indices, pesticide_info)

# Output the result
print("Predicted Class Name:", predicted_class_name)
print("Pesticide Name:", pesticide_name)
print("Buying Link:", buying_link)


model.save('drive/MyDrive/trained_models/plant_disease_prediction_model.h5')

model.save('plant_disease_prediction_model.h5')
